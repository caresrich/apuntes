1.- El funcionamiento de una session en una pagina web es la siguiente:
    -Un usuario ingresa sus credenciales (datos que le permiten iniciar sesión)
    -El servidor verifica que las credenciales sean correctas, y crea una sesión (esto puede ser un archivo, un registro nuevo a la DB) 
    -Una cookie con el identificador de session (session ID) es puesta en el navegador web del usuario.
    -En las peticiones siguientes, el session ID es comparado con las sesiones creadas por el servidor.
    -Una vez que el usuario se desconecta, la sesión es destruida en ambos lados (tanto en el cliente como en el servidor)
2.-  Un cookie trabaja similar a una session pero esta no esta creada con el objetivo de realizar autenticacion sino con la finalidad de personalizar la navegacion
    de un usuario, al momento de navegar se crean a lado del cliente (nvegador) muchas coockies guardando informacion entonces en la proxima peticion del usuario
    esta peticion viaja al servidor conteniendo las cookies para que el servidor se de cuenta que paginas habitualmete visita ese usuario para que la respuesta
    sea mas personalizada, pero esto se convierto un blanco de ataque para los jackers ya que es informacion que viaja hacia el servidor.
1.- Un Token en una medida de autenticacion mucha mas efectiva y segura y el funcionamiento es la siguiente:
    -Un usuario ingresa sus credenciales (datos que le permiten iniciar sesión)
    -El servidor verifica que las credenciales sean correctas, y devuelve un token firmado
    -El token es guardado en el lado del cliente, comúnmente en el local storage (pero puede guardarse también en el session storage o incluso como una cookie)
    -Las peticiones siguientes al servidor incluyen este token (a través de un Authorization header o alguno de los otros métodos antes mencionados)
    -El servidor decodifica el JWT y si el token es válido procesa la solicitud
    -Una vez que el usuario se desconecta, el token es destruido en el lado del cliente (no es necesaria la interacción con el servidor)
    Por lo tanto un token es mucho mas segura que una session.
1.- El uso de los JWT (json web token) se popularizo en los ultimos tiempos, esto debido a la aparicion de los SPA (Single page aplication) y el desarrollo en
    diferentes plataformas como aplicacaiones para android o ios, ya que las sessiones no son soportadas por estas plataformas ya que estas plataformas solo hacen
    en consumo de REST Apis entonces una de las desventajas de las sessiones es que no son muy escalables esto debido a que se tendria que crear otro backen 
    si queremos una version web y una aplicaion android por ejemplo, entonces es ahi donde entra los JWT ya que es ideal crear un solo backend la cual suministre
    datos json con autenticacion tokens que pueden ser consumidas ya sea por un SPA como React.js o una aplicacion android o ios.
5.- Session=autenticacion con estado, es decir la cookie guarda en numero de id de la session que esta en el servidor para luego ser comparado.
6.- Token=autenticacion sin estado, es decir el servidor crea una firma y lo envia al navegador para luego en la proxima peticion verifivar dicha firma.
7.- La escalabilidad de un software es la capacidad del software para adaptarse al creciente número de usuario, transacciones, etc